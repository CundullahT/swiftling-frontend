{/* Pronunciation Dialog */}
      <Dialog open={isPronunciationDialogOpen} onOpenChange={setIsPronunciationDialogOpen}>
        <DialogContent className="sm:max-w-md rounded-xl overflow-hidden">
          <DialogHeader>
            <DialogTitle className="text-xl font-semibold">
              Pronunciation <span className="text-xs bg-amber-100 text-amber-800 px-2 py-0.5 rounded-full ml-2">Coming Soon</span>
            </DialogTitle>
            <DialogDescription>
              This feature will allow you to listen to phrase pronunciations in a future update
            </DialogDescription>
          </DialogHeader>
          <div className="border-t border-gray-200 pt-4">
            <div className="space-y-6">
              {/* Original phrase pronunciation */}
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-sm font-medium">Original Phrase</h3>
                    <p className="text-lg mt-1 text-gray-800">
                      {selectedPhrase?.phrase}
                    </p>
                    <p className="text-xs text-gray-500">
                      {selectedPhrase?.sourceLanguage && 
                        selectedPhrase.sourceLanguage.charAt(0).toUpperCase() + 
                        selectedPhrase.sourceLanguage.slice(1)}
                    </p>
                  </div>
                  <Button 
                    variant="outline" 
                    size="icon"
                    className="h-10 w-10"
                    disabled={isPlayingOriginal}
                    onClick={() => selectedPhrase && 
                      playPronunciation(
                        selectedPhrase.phrase, 
                        selectedPhrase.sourceLanguage || 'en',
                        true
                      )
                    }
                    title="Pronunciation feature coming soon"
                  >
                    {isPlayingOriginal ? (
                      <div className="h-5 w-5 rounded-full border-2 border-primary border-t-transparent animate-spin" />
                    ) : (
                      <span className="text-lg">ðŸ”Š</span>
                    )}
                  </Button>
                </div>
                <p className="text-xs text-gray-500 italic">Pronunciation will be available in a future update</p>
              </div>

              {/* Translation pronunciation */}
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="text-sm font-medium">Translation</h3>
                    <p className="text-lg mt-1 text-gray-800">
                      {selectedPhrase?.translation}
                    </p>
                    <p className="text-xs text-gray-500">
                      {selectedPhrase?.targetLanguage && 
                        selectedPhrase.targetLanguage.charAt(0).toUpperCase() + 
                        selectedPhrase.targetLanguage.slice(1)}
                    </p>
                  </div>
                  <Button 
                    variant="outline" 
                    size="icon"
                    className="h-10 w-10"
                    disabled={isPlayingTranslation}
                    onClick={() => selectedPhrase && 
                      playPronunciation(
                        selectedPhrase.translation, 
                        selectedPhrase.targetLanguage || 'en',
                        false
                      )
                    }
                    title="Pronunciation feature coming soon"
                  >
                    {isPlayingTranslation ? (
                      <div className="h-5 w-5 rounded-full border-2 border-primary border-t-transparent animate-spin" />
                    ) : (
                      <span className="text-lg">ðŸ”Š</span>
                    )}
                  </Button>
                </div>
                <p className="text-xs text-gray-500 italic">Pronunciation will be available in a future update</p>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-3xl rounded-xl">
          <DialogHeader>
            <DialogTitle>Edit Phrase</DialogTitle>
            <DialogDescription>
              Make changes to your phrase below.
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleSubmit} className="flex flex-col">
            <div className="space-y-5 overflow-y-auto h-[50vh] max-h-[50vh] sm:h-auto sm:max-h-full pr-3 -mr-3 sm:pr-0 sm:mr-0 -mt-1">
              <div className="grid grid-cols-1 gap-y-5 gap-x-4 sm:grid-cols-4">
                {/* Row 1: Phrase & Source Language */}
                <div className="sm:col-span-3">
                  <div className="space-y-2">
                    <Label htmlFor="edit-phrase">Phrase</Label>
                    <Input 
                      id="edit-phrase"
                      name="phrase"
                      value={editedPhrase}
                      onChange={(e) => {
                        setEditedPhrase(e.target.value);
                        if (formErrors.phrase) {
                          setFormErrors({...formErrors, phrase: false});
                        }
                      }}
                      placeholder="Enter phrase to learn"
                      className={formErrors.phrase ? "border-red-500" : ""}
                    />
                    {formErrors.phrase && (
                      <p className="text-sm text-red-500">Phrase is required</p>
                    )}
                  </div>
                </div>
                <div className="sm:col-span-1">
                  <div className="space-y-2">
                    <Label htmlFor="edit-sourceLanguage">Source Language</Label>
                    <div className="relative">
                      <Input 
                        id="edit-sourceLanguage"
                        placeholder="Type or select language"
                        value={sourceLanguageInput}
                        onChange={(e) => {
                          handleSourceLanguageChange(e);
                          if (formErrors.sourceLanguage) {
                            setFormErrors({...formErrors, sourceLanguage: false});
                          }
                        }}
                        onFocus={() => {
                          setFilteredSourceLanguages(LANGUAGES);
                        }}
                        onBlur={() => {
                          // Small delay to allow clicking on dropdown items
                          setTimeout(() => setFilteredSourceLanguages([]), 200);
                        }}
                        onKeyDown={(e) => handleLanguageKeyDown('source', e)}
                        className={formErrors.sourceLanguage && !sourceLanguage ? "border-red-500" : ""}
                      />
                      {/* No plus button for source language field as users should select from the provided options */}

                      {/* Source language suggestions */}
                      {filteredSourceLanguages.length > 0 && (
                        <div className="absolute z-20 mt-1 w-full bg-white shadow-lg max-h-40 rounded-md py-1 text-base overflow-auto focus:outline-none sm:text-sm">
                          <ul className="divide-y divide-gray-200">
                            {filteredSourceLanguages.map((language) => (
                              <li
                                key={language.id}
                                className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                onClick={() => {
                                  setLanguage('source', language.id);
                                  if (formErrors.sourceLanguage) {
                                    setFormErrors({...formErrors, sourceLanguage: false});
                                  }
                                }}
                              >
                                {language.name}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                    {sourceLanguage && (
                      <div className="mt-2">
                        <Badge className="px-2 py-1 bg-primary-500/10 text-primary-700 hover:bg-primary-500/20 transition-colors duration-200">
                          {LANGUAGES.find(l => l.id === sourceLanguage)?.name || sourceLanguage}
                          <button
                            type="button"
                            onClick={() => {
                              setSourceLanguage("");
                              setFormErrors({...formErrors, sourceLanguage: true});
                            }}
                            className="ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                          >
                            <X className="h-3 w-3" />
                          </button>
                        </Badge>
                      </div>
                    )}
                    {formErrors.sourceLanguage && !sourceLanguage && (
                      <p className="text-sm text-red-500">Source language is required</p>
                    )}
                  </div>
                </div>

                {/* Row 2: Translation & Target Language */}
                <div className="sm:col-span-3">
                  <div className="space-y-2">
                    <Label htmlFor="edit-translation">Translation</Label>
                    <Input 
                      id="edit-translation"
                      name="translation"
                      value={editedTranslation}
                      onChange={(e) => {
                        setEditedTranslation(e.target.value);
                        if (formErrors.translation) {
                          setFormErrors({...formErrors, translation: false});
                        }
                      }}
                      placeholder="Enter translation in your language"
                      className={formErrors.translation ? "border-red-500" : ""}
                    />
                    {formErrors.translation && (
                      <p className="text-sm text-red-500">Translation is required</p>
                    )}
                  </div>
                </div>
                
                <div className="sm:col-span-1">
                  <div className="space-y-2">
                    <Label htmlFor="edit-targetLanguage">Target Language</Label>
                    <div className="relative">
                      <Input 
                        id="edit-targetLanguage"
                        placeholder="Type or select language"
                        value={targetLanguageInput}
                        onChange={(e) => {
                          handleTargetLanguageChange(e);
                          if (formErrors.targetLanguage) {
                            setFormErrors({...formErrors, targetLanguage: false});
                          }
                        }}
                        onFocus={() => {
                          setFilteredTargetLanguages(LANGUAGES);
                        }}
                        onBlur={() => {
                          // Small delay to allow clicking on dropdown items
                          setTimeout(() => setFilteredTargetLanguages([]), 200);
                        }}
                        onKeyDown={(e) => handleLanguageKeyDown('target', e)}
                        className={formErrors.targetLanguage && !targetLanguage ? "border-red-500" : ""}
                      />
                      {/* No plus button for target language field as users should select from the provided options */}

                      {/* Target language suggestions */}
                      {filteredTargetLanguages.length > 0 && (
                        <div className="absolute z-20 mt-1 w-full bg-white shadow-lg max-h-40 rounded-md py-1 text-base overflow-auto focus:outline-none sm:text-sm">
                          <ul className="divide-y divide-gray-200">
                            {filteredTargetLanguages.map((language) => (
                              <li
                                key={language.id}
                                className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                                onClick={() => {
                                  setLanguage('target', language.id);
                                  if (formErrors.targetLanguage) {
                                    setFormErrors({...formErrors, targetLanguage: false});
                                  }
                                }}
                              >
                                {language.name}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                    {targetLanguage && (
                      <div className="mt-2">
                        <Badge className="px-2 py-1 bg-primary-500/10 text-primary-700 hover:bg-primary-500/20 transition-colors duration-200">
                          {LANGUAGES.find(l => l.id === targetLanguage)?.name || targetLanguage}
                          <button
                            type="button"
                            onClick={() => {
                              setTargetLanguage("");
                              setFormErrors({...formErrors, targetLanguage: true});
                            }}
                            className="ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                          >
                            <X className="h-3 w-3" />
                          </button>
                        </Badge>
                      </div>
                    )}
                    {formErrors.targetLanguage && !targetLanguage && (
                      <p className="text-sm text-red-500">Target language is required</p>
                    )}
                  </div>
                </div>

                {/* Row 3: Notes & Tags */}
                <div className="sm:col-span-2">
                  <Label htmlFor="edit-notes">Notes (optional)</Label>
                  <Textarea 
                    id="edit-notes"
                    name="notes"
                    value={editedNotes}
                    onChange={(e) => setEditedNotes(e.target.value)}
                    placeholder="Add explanations, context, or example sentences."
                    rows={3}
                  />
                </div>

                <div className="sm:col-span-2">
                  <Label htmlFor="edit-tags">Tags (optional, max 3)</Label>
                  <div className="flex flex-wrap gap-2 mb-2">
                    {selectedTags.map(tag => (
                      <Badge key={tag} className="px-2 py-1 bg-primary-500/10 text-primary-700 hover:bg-primary-500/20 transition-colors duration-200">
                        {tag}
                        <button
                          type="button"
                          onClick={() => removeTag(tag)}
                          className="ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                  <div className="relative">
                    <Input
                      id="edit-tags"
                      placeholder={selectedTags.length >= 3 ? "Maximum 3 tags reached" : "Type or select a tag..."}
                      value={tagInput}
                      onChange={(e) => {
                        handleTagInputChange(e);
                        if (formErrors.tagLength) {
                          setFormErrors({...formErrors, tagLength: false});
                        }
                      }}
                      onFocus={() => {
                        // Always show available tags, regardless of whether some are selected
                        if (selectedTags.length < 3) {
                          const availableTags = SAMPLE_TAGS.filter(tag => !selectedTags.includes(tag));
                          setFilteredSuggestions(availableTags);
                        }
                      }}
                      onBlur={() => {
                        // Small delay to allow clicking on dropdown items
                        setTimeout(() => setFilteredSuggestions([]), 200);
                      }}
                      onClick={() => {
                        // Also show suggestions on click for better usability
                        if (selectedTags.length < 3) {
                          const availableTags = SAMPLE_TAGS.filter(tag => !selectedTags.includes(tag));
                          setFilteredSuggestions(availableTags);
                          
                          // Add auto-scrolling functionality to make tag options visible
                          setTimeout(() => {
                            const inputElement = document.getElementById('edit-tags');
                            if (inputElement) {
                              // Calculate position to ensure tag suggestions are visible
                              inputElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            }
                          }, 100);
                        }
                      }}
                      onKeyDown={handleTagKeyDown}
                      className={`pr-8 ${formErrors.tagLength ? "border-red-500" : ""}`}
                      disabled={selectedTags.length >= 3}
                    />
                    {formErrors.tagLength && (
                      <p className="text-sm text-red-500">Tags must be between 3-16 characters</p>
                    )}
                    {tagInput && selectedTags.length < 3 && (
                      <button
                        type="button"
                        className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                        onClick={() => addTag(tagInput)}
                      >
                        <Plus className="h-4 w-4" />
                      </button>
                    )}
                    
                    {/* Tag suggestions - always show when focused regardless of text input */}
                    {filteredSuggestions.length > 0 && selectedTags.length < 3 && (
                      <div 
                        className="absolute z-50 mt-1 w-full bg-white shadow-lg rounded-md py-1 text-base overflow-auto focus:outline-none sm:text-sm border border-gray-200"
                        style={{ 
                          maxHeight: "150px", 
                          bottom: "auto",
                          top: "100%" 
                        }}
                      >
                        <ul className="divide-y divide-gray-200">
                          {filteredSuggestions.map((tag) => (
                            <li
                              key={tag}
                              className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm"
                              onClick={() => addTag(tag)}
                            >
                              {tag}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex flex-col sm:flex-row sm:justify-end gap-3 pt-4 mt-4 border-t">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsEditDialogOpen(false)}
                className="w-full sm:w-auto"
              >
                Cancel
              </Button>
              <Button 
                type="submit"
                className="w-full sm:w-auto"
              >
                Save Changes
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>